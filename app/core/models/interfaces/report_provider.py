from typing import Dict, Any, Optional, Protocol, Union

from core.models.devices.traffic_light import TrafficLightSystem
from core.models.devices.vehicle import Vehicle
from core.models.events.simulation_events import SimulationEvent
from core.models.uniform.components.report import SendingPacket
from core.models.uniform.components.report_models import ReportType, ReporterType, Situation
from core.models.uniform.components.reporter import SendersEntity
from core.simulation.simulation_context import SimulationContext
from scenarios.canberra_case_study.apps.emergency_response.emergency_response import EmergencyResponseCenter


class IReportProvider(Protocol):
    
    """Protocol capturing all public methods of ReportManager."""
    def __init__(self, simulation_context: SimulationContext) -> None: ...
    def add(self, report: SendingPacket) -> None: ...
    def update(self) -> None: ...
    def get_simulation_reports(self) -> Dict[int, SendingPacket]: ...
    def exists(self, vehicle_id: str, traffic_light_id: str) -> bool: ...
    def get_report_of_object_of_interest_id(self, object_of_interest_id: str) -> Optional[SendingPacket]: ...
    def get_solved_accidents(self) -> Dict[int, SendingPacket]: ...
    def get_number_of_solved_accidents(self) -> int: ...
    def get_unsolved_accidents(self) -> Dict[int, SendingPacket]: ...
    def get_number_of_unsolved_accidents(self) -> int: ...
    def get_authentic_accident_reports(self) -> Dict[int, SendingPacket]: ...
    def get_authentic_traffic_lights_requests(self) -> Dict[int, SendingPacket]: ...
    def get_unauthentic_accident_reports(self) -> Dict[int, SendingPacket]: ...
    def get_unauthentic_traffic_light_reports(self) -> Dict[int, SendingPacket]: ...
    def get_reporter_type(self, reporter_id: str) -> ReporterType: ...
    def get_unsolved_reports(self) -> Dict[int, SendingPacket]: ...
    def get_unverified_reports_by_situation(self, situation: Situation) -> Dict[int, SendingPacket]: ...
    def get_reports_by_type(self, report_type: ReportType) -> Dict[int, SendingPacket]: ...
    def create_report(
        self,
        reporters: Dict[str, SendersEntity],
        event: SimulationEvent,
        object_of_interest: Vehicle,
        receiver: Union[EmergencyResponseCenter, TrafficLightSystem],
        report_type: ReportType
    ) -> SendingPacket: ...
    def create_reporters(self, filtered_reporters: Dict[str, SendersEntity], event: SimulationEvent) -> Dict[str, SendersEntity]: ...

